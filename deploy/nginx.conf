user nginx;
worker_processes auto;
worker_rlimit_nofile 100000;
pid /var/run/nginx.pid;

events {
	worker_connections 2048;
  multi_accept on;
  use epoll;
}

http {

	sendfile on;
	
	tcp_nopush on;
	tcp_nodelay on;
	server_tokens off;
	
	keepalive_timeout 20;
	
	reset_timedout_connection on;
	send_timeout 20;
	
	gzip on;
	
	types_hash_max_size 2048;
  client_max_body_size 2M;
  
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;
	include /etc/nginx/conf.d/*.conf;

  upstream syme {
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    server 127.0.0.1:3002;
  }

  upstream getsyme {
    server 127.0.0.1:5000;
    server 127.0.0.1:5001;
    server 127.0.0.1:5002;
  }

  server {

    proxy_pass_header Server;

    listen 443 ssl;
    server_name .getsyme.com;
    add_header Strict-Transport-Security max-age=31536000;
    add_header X-Frame-Options SAMEORIGIN;

    access_log /var/www/getsyme.com/log/access.log;
    error_log  /var/www/getsyme.com/log/error.log;
    root     /var/www/getsyme.com;
    index    index.html;

    ssl on;
    
    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:DES-CBC3-SHA;

    ssl_prefer_server_ciphers on;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  5m;
    
    location /api {
      
      rewrite ^/?api/(.*)$ /$1 break;
      proxy_buffering off;
      proxy_cache off;
      proxy_set_header Host $host;
      proxy_set_header Connection '';
      proxy_redirect  off;
      proxy_http_version 1.1;
      chunked_transfer_encoding off;
      proxy_pass http://syme;
      
    }
    
    location / {
      
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect  off;

      try_files /system/maintenance.html $uri $uri/index.html $uri.html @ruby;
      
    }

    location @ruby {
      proxy_pass http://getsyme;
    }
    
  }

  server {
    
    listen 80;
    
    server_name .getsyme.com;

    location / {
      if ($request_uri ~* "oman") {
        rewrite ^/(.*)$ http://omansail.com permanent;
      }
      rewrite ^ https://$server_name$request_uri? permanent;
    }

  }

}